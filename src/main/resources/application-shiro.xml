<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.1.xsd"
       default-lazy-init="true">

    <description>Shiro Configuration</description>

    <!-- 加载配置属性文件 -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:/properties/dev_plat.properties" />

    <!-- Shiro权限过滤过滤器定义 -->
    <!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
    <bean name="shiroFilterChainDefinitions" class="java.lang.String">
        <constructor-arg>
            <value>
                <!-- 静态资源放行 -->
                /static/** = anon            <!-- anon 过滤 -->
                /userfiles/** = anon
                <!--   ${adminPath}/cas = cas        cas 过滤 -->
                ${adminPath}/login = authc   <!-- authc 过滤 -->
                ${adminPath}/logout = logout <!-- logout 过滤 -->
                ${adminPath}/** = user       <!-- user 过滤 -->
                /act/editor/** = user
                /ReportServer/** = user
            </value>
        </constructor-arg>
    </bean>

    <!-- 安全认证过滤器,对应 web.xml 中定义的 shiroFilter -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" /><!--
		<property name="loginUrl" value="${cas.server.url}?service=${cas.project.url}${adminPath}/cas" /> -->
        <!-- 配置登陆页面 -->
        <property name="loginUrl" value="${adminPath}/login" />
        <!-- 登陆成功后的一面 -->
        <property name="successUrl" value="${adminPath}?login" />
        <property name="filters">
            <map>
                <!-- 定义过滤器，对应上面 shiroFilterChainDefinitions 中不同路径所需的过滤器 -->
                <!-- 将自定义 的FormAuthenticationFilter注入shiroFilter中 -->
                <!-- <entry key="cas" value-ref="casFilter"/> -->
                <entry key="authc" value-ref="formAuthenticationFilter"/>
            </map>
        </property>
        <property name="filterChainDefinitions">
            <ref bean="shiroFilterChainDefinitions"/>
        </property>
    </bean>

<!--    &lt;!&ndash; CAS认证过滤器 &ndash;&gt;-->
<!--    <bean id="casFilter" class="org.apache.shiro.cas.CasFilter">-->
<!--        <property name="failureUrl" value="${adminPath}/login"/>-->
<!--    </bean>-->

    <!-- 定义Shiro安全管理配置 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 注入realm -->
        <property name="realm" ref="systemAuthorizingRealm" />
        <!-- 注入session管理器 -->
        <property name="sessionManager" ref="sessionManager" />
        <!-- 注入缓存管理器 -->
        <property name="cacheManager" ref="shiroCacheManager" />
    </bean>

    <!-- 会话管理器 -->
    <bean id="sessionManager"
          class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- session的失效时长，单位毫秒 -->
        <property name="globalSessionTimeout" value="600000" />
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true" />
    </bean>

<!--    &lt;!&ndash; 自定义会话管理配置 &ndash;&gt;-->
<!--    <bean id="sessionManager" class="com.thinkgem.jeesite.common.security.shiro.session.SessionManager">-->
<!--        <property name="sessionDAO" ref="sessionDAO"/>-->

<!--        &lt;!&ndash; 会话超时时间，单位：毫秒  &ndash;&gt;-->
<!--        <property name="globalSessionTimeout" value="${session.sessionTimeout}"/>-->

<!--        &lt;!&ndash; 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话   &ndash;&gt;-->
<!--        <property name="sessionValidationInterval" value="${session.sessionTimeoutClean}"/>-->
<!--        &lt;!&ndash;  		<property name="sessionValidationSchedulerEnabled" value="false"/> &ndash;&gt;-->
<!--        <property name="sessionValidationSchedulerEnabled" value="true"/>-->

<!--        <property name="sessionIdCookie" ref="sessionIdCookie"/>-->
<!--        <property name="sessionIdCookieEnabled" value="true"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash; 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,-->
<!--        当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! &ndash;&gt;-->
<!--    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">-->
<!--        <constructor-arg name="name" value="devplat.session.id"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash; 自定义Session存储容器 &ndash;&gt;-->
<!--    &lt;!&ndash; 	<bean id="sessionDAO" class="com.thinkgem.jeesite.common.security.shiro.session.JedisSessionDAO"> &ndash;&gt;-->
<!--    &lt;!&ndash; 		<property name="sessionIdGenerator" ref="idGen" /> &ndash;&gt;-->
<!--    &lt;!&ndash; 		<property name="sessionKeyPrefix" value="${redis.keyPrefix}_session_" /> &ndash;&gt;-->
<!--    &lt;!&ndash; 	</bean> &ndash;&gt;-->
<!--    <bean id="sessionDAO" class="com.thinkgem.jeesite.common.security.shiro.session.CacheSessionDAO">-->
<!--        <property name="sessionIdGenerator" ref="idGen" />-->
<!--        <property name="activeSessionsCacheName" value="activeSessionsCache" />-->
<!--        <property name="cacheManager" ref="shiroCacheManager" />-->
<!--    </bean>-->

        <!-- 自定义系统缓存管理器 -->
     	<bean id="shiroCacheManager" class="edu.devplat.common.security.shiro.cache.JedisCacheManager">
     		<property name="cacheKeyPrefix" value="${redis.keyPrefix}_cache_" />
     	</bean>

<!--    <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">-->
<!--        <property name="cacheManager" ref="cacheManager"/>-->
<!--    </bean>-->

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- AOP式方法级权限检查  -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>